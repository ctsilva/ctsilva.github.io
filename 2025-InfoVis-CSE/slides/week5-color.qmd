---
title: "Color Theory and D3 Scales"
subtitle: "CS-GY 6313 - Fall 2025"
author: "Claudio Silva"
institute: "NYU Tandon School of Engineering"
date: "October 3, 2025"
format:
  revealjs:
    theme: [default, custom.scss, lab-light-theme.css]
    slide-number: c/t
    show-slide-number: all
    hash-type: number
    logo: figs/vida.jpg
    width: 1920
    height: 1080
    preview-links: auto
    transition: fade
    transition-speed: fast
    footer: <https://engineering.nyu.edu>
---

## Color Theory and D3 Scales

### Today's Journey
**Biology/Physics** → **Perception Theory** → **Design Principles** → **D3 Implementation** → **Best Practices**

:::: {.columns}
::: {.column width="50%"}
### Part 1: Color Theory
- Physics and physiology of color
- How humans perceive color
- Color spaces and models
- Perceptual principles
:::
::: {.column width="50%"}
### Part 2: D3 Implementation
- Color scales in D3
- Sequential, diverging, categorical
- Interpolation methods
- Accessibility and best practices
:::
::::

::: {.notes}
This lecture bridges the gap between the science of color perception and practical implementation in D3. We follow a logical progression: First understanding the biology and physics (WHY colors work the way they do), then perception theory (HOW humans process color), then design principles (WHAT makes effective color choices), then D3 implementation (HOW to code it), and finally best practices (WHEN to use each approach). This foundation is crucial - without understanding how humans perceive color, you'll make poor design decisions.
:::

## Color in Nature

![](figs/color/animal-colors.jpg){width="70%"}

Vasas et al, PLOS Biology, 2024

::: footer
Image from [PLOS Biology](https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.3002444)
:::

::: {.notes}
Start with how color evolved in nature for communication and survival. Animals use color for warning signals, mating displays, and camouflage. This sets the stage for understanding that color perception is biological and varies across species - humans see differently than birds or bees.
:::

## The Visible Spectrum

![](figs/color/visiblespectrum.jpg){width="80%"}

Humans perceive wavelengths from approximately 390-700nm

::: footer
Gregory, R.L. (1997). *Eye and Brain: The Psychology of Seeing* (5th ed.). Princeton University Press.
:::

## Properties of Light

* **Visible range**: 390-700nm

* **Luminance has huge dynamic range**:
  - 0.00003 — Moonless overcast night sky
  - 30 — Sky on overcast day
  - 3,000 — Sky on clear day
  - 16,000 — Snowy ground in full sunlight

* **Colors result from spectral curves**:
  - Dominant wavelength → **Hue**
  - Brightness → **Lightness**
  - Purity → **Saturation**

::: {.notes}
Key insight: Our eyes handle an enormous dynamic range (100,000:1) through adaptation. This is why absolute luminance values aren't as important as relative contrasts in visualization. The three properties (hue, lightness, saturation) form the basis of the HLS color model, which is more intuitive than RGB for design work. Note that computer screens can only display about 1000:1 contrast ratio, far less than what we can perceive.
:::

## Physiology of the Eye

![](figs/color/physiology-eye.jpg){width="70%"}

Light passes through cornea, pupil, lens, and reaches the retina

::: footer
Gregory, R.L. (1997). *Eye and Brain: The Psychology of Seeing* (5th ed.). Princeton University Press.
:::

## The Retina Structure

![](figs/color/retina.jpg){width="70%"}

Multiple layers of cells process visual information before sending to brain

::: footer
Gregory, R.L. (1997). *Eye and Brain: The Psychology of Seeing* (5th ed.). Princeton University Press.
:::

## Photoreceptors: Rods and Cones

### Rods
- Active at low light levels (scotopic vision)
- Only one wavelength-sensitivity function
- ~120 million in human eye

### Cones
- Active at normal light levels (photopic vision)
- Three types with different peak sensitivities
- ~6 million in human eye
- Concentrated in fovea

## Cone Sensitivity Curves

![](figs/color/cones-spectral-sensitity.jpg){width="70%"}

Three types of cones: S (short/blue), M (medium/green), L (long/red)

::: footer
Stone, M. (2003). *A Field Guide to Digital Color*. A.K. Peters.
:::

::: {.notes}
Critical slide! This is the foundation of trichromatic color theory. Note the overlapping sensitivity curves - this is why we can't see "pure" wavelengths. The brain interprets the relative activation of all three cone types. Point out that the L and M curves are very close, which is why red-green colorblindness is most common.
:::

## Density of Cones Across Retina

![](figs/color/cones-density.jpg){width="60%"}

Highest density in fovea (center of vision)

::: footer
Gregory, R.L. (1997). *Eye and Brain: The Psychology of Seeing* (5th ed.). Princeton University Press.
:::

## Rods vs. Cones Sensitivity

![](figs/color/cones-and-rods-sensitivity.jpg){width="70%"}

Rods more sensitive in low light; cones provide color vision

::: footer
Gregory, R.L. (1997). *Eye and Brain: The Psychology of Seeing* (5th ed.). Princeton University Press.
:::

## How We Perceive Color

![](figs/color/color-stimulus.jpg){width="70%"}

Color perception results from brain's interpretation of cone responses

::: footer
Stone, M. (2003). *A Field Guide to Digital Color*. A.K. Peters.
:::

## Color Matching Experiments

![](figs/color/color-matching-experiments.jpg){width="70%"}

Foundation of color theory: any color can be matched with three primaries

::: footer
Stone, M. (2003). *A Field Guide to Digital Color*. A.K. Peters.
:::

## Color Models for Visualization

### Trichromacy
Humans perceive colors through three channels

### Most useful color description for visualization:

- **Hue**: What color (red, blue, green...)
- **Saturation**: Purity of color
- **Luminance/Lightness**: Brightness

::: footer
Material from Enrico Bertini
:::

::: {.notes}
This is where we transition from biology to design principles. These three dimensions map to how we actually think about color. Luminance is the strongest channel for ordered data (we easily see light-to-dark progression). Hue is best for categorical distinctions (red vs blue vs green). Saturation is the weakest channel - hard to judge precise values. This hierarchy guides our encoding choices.
:::

## Just Noticeable Difference (JND)

### The smallest detectable difference in a stimulus

**For Color:**

- **Luminance**: ~1-2% change detectable
- **Hue**: Varies by wavelength (most sensitive in blue-green)
- **Saturation**: ~5-10% change needed

**Implications for Visualization:**

- Need sufficient steps between colors in a scale
- Can't encode too many distinct values
- Background affects perception (simultaneous contrast)

::: {.notes}
JND is fundamental to color scale design. It determines how many distinct values you can encode. For continuous scales, you want steps larger than JND to be clearly distinguishable. This is why we can only reliably encode about 5-7 distinct colors, or about 7-10 distinct luminance levels. The background color affects JND - a color that's distinguishable on white might not be on gray.
:::

## How Do We Use Color in Visualization?

Two primary purposes:

:::: {.columns}
::: {.column width="50%"}
### 1. Quantify
Show numerical values
:::
::: {.column width="50%"}
### 2. Label
Distinguish categories
:::
::::

::: footer
Material from Enrico Bertini
:::

## Color to Quantify

![](figs/color/color-quantify.jpg){width="80%"}

Mapping numerical values to color intensity or hue

::: footer
Material from Enrico Bertini
:::

## Color to Label

![](figs/color/color-label.jpg){width="80%"}

Using distinct colors to represent different categories

::: footer
Material from Enrico Bertini
:::

## Quantitative Color Scales

### Desired Properties:

- **Uniformity**: Value difference = Perceived difference
- **Discriminability**: As many distinct values as possible

### Challenge:
Human perception is non-linear!

::: footer
Material from Enrico Bertini
:::

::: {.notes}
This is a key insight students often miss. Equal steps in RGB values don't produce equal perceptual steps. This is why we need perceptually uniform color spaces like LAB or HCL. Use the example of yellow appearing brighter than blue even at the same RGB intensity.
:::

## Single Hue Sequential Scales

Best for quantitative data with natural ordering

:::: {.columns}
::: {.column width="40%"}
- Choose one hue
- Map value to luminance
- Light → Dark or Dark → Light
:::
::: {.column width="60%"}
![](figs/color/single-hue-color-scale.jpg)
:::
::::

::: footer
Material from Enrico Bertini
:::

## Categorical Color Scales

For nominal/categorical data without inherent order

![](figs/color/categorical-color-scale.jpg){width="70%"}

### Design Goals:

- **Uniform saliency**: Nothing stands out unintentionally
- **Maximum discriminability**: Each category clearly distinct

::: footer
Material from Enrico Bertini
:::

## Categorical Scale Limits

### How many distinct colors can we use effectively?

Research suggests: **5-10 distinct categories maximum**

Beyond this limit:

- Colors become confusable
- Need additional encoding (shape, pattern)
- Consider grouping categories

::: footer
Healey, C.G. (1996). [Choosing effective colours for data visualization](https://ieeexplore.ieee.org/document/567774). IEEE Visualization '96, pp. 263-270.
:::

::: {.notes}
Healey's research showed that pre-attentive processing (instant recognition) breaks down beyond 5-7 colors. With careful design, you might push to 10-12, but users will need legends and more cognitive effort. When you have more categories, consider: (1) grouping into super-categories with sub-hues, (2) highlighting only important categories and graying others, or (3) using interaction to filter.
:::

## Diverging Color Scales

For data with meaningful midpoint (zero, average, neutral)

:::: {.columns}
::: {.column width="50%"}
![](figs/color/election-results-continous-colormap.jpg)
Sequential scale obscures the critical 50% threshold
:::
::: {.column width="50%"}
![](figs/color/election-results-divergent-colormap.jpg)
Diverging scale clearly shows above/below threshold
:::
::::

::: footer
Data from [County Level Election Results](https://github.com/tonmcg/County_Level_Election_Results_12-16)
:::

::: {.notes}
Perfect example of why choosing the right scale matters! The left map makes it hard to see which counties voted majority Republican vs Democrat. The diverging scale immediately reveals the pattern. Other good use cases: temperature anomalies (above/below average), profit/loss, survey responses (agree/disagree). Key insight: the midpoint should be meaningful, not arbitrary.
:::

## Color Context Effects

### Simultaneous Contrast
The same color appears different depending on surrounding colors

**Key Effects:**

- Colors appear lighter on dark backgrounds
- Colors appear more saturated next to gray
- Complementary colors enhance each other

**Design Implications:**

- Test colors in context, not isolation
- Be consistent with backgrounds
- Use borders/whitespace to separate regions
- Consider the whole visualization, not just the palette

::: {.notes}
This is why color palettes that look good in a swatch panel might fail in your visualization. The classic example: a gray square looks yellowish on a blue background and bluish on a yellow background. For maps, this means adjacent regions can affect color perception. Solution: add thin white borders between regions, or test your palette with actual data patterns.
:::

## Semantic Color Associations

### Cultural and Contextual Meanings

:::: {.columns}
::: {.column width="50%"}
**Universal Associations:**

- Red: Heat, danger, stop
- Blue: Cold, water, calm
- Green: Nature, growth, go
- Yellow: Caution, energy
:::

::: {.column width="50%"}
**Domain-Specific:**

- Finance: Red = loss, Green = profit
- Politics: Red/Blue = parties (varies by country!)
- Temperature: Blue = cold, Red = hot
- Health: Red = critical, Yellow = warning, Green = normal
:::
::::

::: {.notes}
Leverage semantic associations when they help, but be aware they're not universal. In China, red means prosperity. In finance, Western markets use red for losses, but East Asian markets use red for gains! Always consider your audience. Sometimes you should intentionally break conventions - use blue for hot if you're showing cooling needs, not temperature.
:::

## Color Blindness Considerations

~10% of males and ~1% of females have color vision deficiencies

![](figs/color/color-blindness.jpg){width="80%"}

::: footer
Oliveira, M. "Towards More Accessible Visualizations for Color-Vision-Deficient Individuals" Computing in Science & Engineering, 2013
:::

::: {.notes}
Emphasize that this means in a typical classroom, 2-3 students likely have some form of color vision deficiency. Red-green is most common (deuteranopia and protanopia). Always design with this in mind - use redundant encoding (shape, pattern) and test with simulators. The Viridis colormap was specifically designed to be perceptually uniform AND colorblind-safe.
:::

## Color Spaces

### RGB (Red, Green, Blue)
- Device-oriented
- Not perceptually uniform
- Common in programming

### HSL/HSV (Hue, Saturation, Lightness/Value)
- More intuitive for humans
- Better for color selection
- Still not perceptually uniform

### LAB/LCH
- Perceptually uniform
- Better for interpolation
- Used in professional design

::: {.notes}
Critical concept: RGB is how devices work, but not how humans perceive. Equal steps in RGB space don't produce equal perceptual steps - this is why RGB interpolation looks muddy. HSL is better for picking colors manually but still has issues (yellow appears brighter than blue at same L value). LAB/LCH are based on human perception studies and produce smooth gradients. Always use LAB or HCL for color interpolation in visualizations.
:::

## Perceptual Color Spaces

### Why Perceptual Uniformity Matters

In RGB space, equal numerical steps ≠ equal perceptual steps

```javascript
// RGB interpolation can produce muddy colors
d3.interpolateRgb("red", "blue")

// LAB interpolation maintains perceptual uniformity
d3.interpolateLab("red", "blue")

// HCL even better for many visualizations
d3.interpolateHcl("red", "blue")
```

::: {.notes}
Demo this live if possible! RGB interpolation between red and blue passes through muddy purple. LAB maintains brightness consistency. HCL (Hue-Chroma-Luminance) follows the color wheel, producing vibrant intermediates. For diverging scales, HCL is often best. For sequential scales, LAB works well. The key is that perceptual uniformity means your data differences map linearly to perceived color differences.
:::

## D3 Color Scales

### Sequential Scales

```javascript
// Single hue
const blueScale = d3.scaleSequential()
  .domain([0, 100])
  .interpolator(d3.interpolateBlues);

// Multi-hue
const viridisScale = d3.scaleSequential()
  .domain([0, 100])
  .interpolator(d3.interpolateViridis);
```

### Built-in Color Schemes:

- Blues, Greens, Reds, Purples, Oranges, Greys
- Viridis, Inferno, Magma, Plasma (perceptually uniform)

## D3 Diverging Scales

```javascript
// Diverging scale with custom midpoint
const divergingScale = d3.scaleDiverging()
  .domain([−50, 0, 100])  // min, midpoint, max
  .interpolator(d3.interpolateRdBu);

// Common diverging schemes:
// RdBu (red-blue), RdYlGn (red-yellow-green),
// BrBG (brown-green), PuOr (purple-orange)
```

Perfect for:

- Temperature anomalies
- Election results
- Profit/loss
- Any data with meaningful zero

## D3 Categorical Scales

```javascript
// Ordinal scale with color scheme
const categoryScale = d3.scaleOrdinal()
  .domain(["A", "B", "C", "D"])
  .range(d3.schemeCategory10);

// Available categorical schemes:
// schemeCategory10 - 10 distinct colors
// schemeSet1 - 9 colors (colorblind safe)
// schemeSet2 - 8 colors (print friendly)
// schemeSet3 - 12 colors (pastel)
// schemePaired - 12 colors (paired)
```

::: {.notes}
Important: schemeSet1 is colorblind-safe but has very saturated colors that can be overwhelming. schemeSet2 is better for professional presentations. schemePaired is great when you have natural pairs in your data (e.g., before/after, male/female). Always test your chosen scheme with actual data - what looks good in isolation may not work with your specific visualization.
:::

## Color Scale Best Practices

:::: {.columns}
::: {.column width="50%"}
### Sequential Data

✅ Use single or multi-hue sequential

❌ Don't use rainbow scales

### Categorical Data

✅ Use distinct hues with similar saturation/lightness

❌ Don't use more than ~8 categories
:::

::: {.column width="50%"}
### Diverging Data

✅ Use when there's a meaningful midpoint

❌ Don't use for purely positive data

### Accessibility

✅ Test with colorblind simulators

✅ Provide redundant encoding when possible
:::
::::

## Advanced D3 Scales

### Time Scales
```javascript
const timeScale = d3.scaleTime()
  .domain([new Date(2020, 0, 1), new Date(2025, 0, 1)])
  .range([0, width]);
```

### Log Scales
```javascript
const logScale = d3.scaleLog()
  .domain([1, 1000])
  .range([0, width]);
```

### Power Scales
```javascript
const sqrtScale = d3.scaleSqrt()  // same as scalePow().exponent(0.5)
  .domain([0, 100])
  .range([0, width]);
```

::: {.notes}
These scales transform your data space. Time scales understand JavaScript dates and create nice tick marks at meaningful intervals (days, months, years). Log scales are essential for data with large ranges - use when data spans multiple orders of magnitude. Square root scales (and other power scales) are useful for circle areas - since area grows with radius squared, sqrt scale makes area proportional to data value.
:::

## Quantized Scales

Transform continuous domains into discrete ranges

```javascript
// Quantize scale - equal intervals
const quantizeScale = d3.scaleQuantize()
  .domain([0, 100])
  .range(["low", "medium", "high"]);

// Quantile scale - equal quantities
const quantileScale = d3.scaleQuantile()
  .domain(data)
  .range(["Q1", "Q2", "Q3", "Q4"]);

// Threshold scale - custom breakpoints
const thresholdScale = d3.scaleThreshold()
  .domain([30, 70])
  .range(["cold", "comfortable", "hot"]);
```

::: {.notes}
Critical for choropleth maps and binned visualizations. Quantize creates equal-width bins (like a histogram). Quantile creates bins with equal numbers of data points - useful for skewed distributions. Threshold gives you complete control over breakpoints - use for meaningful boundaries like freezing point, poverty line, etc. Always show the binning method in your legend!
:::

## Color Interpolation

D3 provides multiple interpolation methods:

```javascript
// RGB interpolation (can be muddy)
d3.interpolateRgb("red", "blue")(0.5);

// HSL interpolation (follows hue wheel)
d3.interpolateHsl("red", "blue")(0.5);

// LAB interpolation (perceptually uniform)
d3.interpolateLab("red", "blue")(0.5);

// HCL interpolation (best for many cases)
d3.interpolateHcl("red", "blue")(0.5);

// Cubehelix (rainbow with uniform luminance)
d3.interpolateCubehelix("red", "blue")(0.5);
```

## Creating Custom Color Scales

```javascript
// Custom sequential scale
const customSequential = d3.scaleSequential()
  .domain([0, 100])
  .interpolator(t => d3.interpolateHcl("#e8f4f8", "#004c6d")(t));

// Custom diverging scale
const customDiverging = d3.scaleDiverging()
  .domain([−1, 0, 1])
  .interpolator(t => t < 0.5
    ? d3.interpolateHcl("#67001f", "#f7f7f7")(t * 2)
    : d3.interpolateHcl("#f7f7f7", "#053061")((t - 0.5) * 2));

// Piecewise scale
const piecewise = d3.scaleLinear()
  .domain([0, 50, 100])
  .range(["#2166ac", "#f7f7f7", "#b2182b"]);
```

## Practical Color Guidelines

### For Print
- Consider grayscale reproduction
- Use ColorBrewer schemes
- Test on actual printer

### For Screen
- Consider monitor variations
- Use sufficient contrast
- Test on different devices

### For Accessibility
- Use colorblind-safe palettes
- Provide alternative encodings
- Test with simulators

## Color Tools and Resources

### Online Tools:
- [ColorBrewer](https://colorbrewer2.org) - Color schemes for maps
- [Accessible Colors](https://accessible-colors.com) - WCAG compliance
- [Coblis](https://www.color-blindness.com/coblis-color-blindness-simulator/) - Colorblind simulator

### D3 Resources:
- [D3 Scale Chromatic](https://github.com/d3/d3-scale-chromatic) - All color schemes
- [Observable Color Notebooks](https://observablehq.com/@d3/color-schemes) - Interactive examples

### Research:
- [ColorBrewer Paper](http://colorbrewer2.org/learnmore/schemes_full.html) - Harrower & Brewer
- [Viridis Explanation](https://www.youtube.com/watch?v=xAoljeRJ3lU) - Why we need better colormaps

## Common Color Mistakes

:::: {.columns}
::: {.column width="50%"}
### 1. Rainbow Color Maps
- Non-uniform perceptually
- Create false boundaries
- Poor for colorblind users

### 2. Too Many Categories
- Beyond 7-8, colors become confusable
- Consider grouping or filtering
:::

::: {.column width="50%"}
### 3. Ignoring Context
- Red/green for good/bad in finance
- Cultural color associations vary

### 4. Poor Contrast
- Insufficient luminance difference
- Fails accessibility standards
:::
::::

::: {.notes}
Show real examples: (1) Rainbow map - point out the artificial yellow band that appears as a boundary but isn't in the data. (2) Too many categories - show a 20-category pie chart where you can't distinguish colors. (3) Context - red in Western culture means "stop/bad" but in Chinese culture can mean "prosperity/good". (4) Poor contrast - show light yellow on white background, fails WCAG standards.
:::

## Lab Preview: Color and Scales in D3

### Today's Lab Activities:
1. Implement different scale types (linear, log, time)
2. Create color scales for different data types
3. Build a choropleth map with sequential colors
4. Design accessible categorical palettes
5. Test colorblind safety

### Key Concepts to Practice:
- Scale domains and ranges
- Color interpolation methods
- Legends for color scales
- Interactive scale adjustments

::: {.notes}
The lab will be hands-on with Observable notebooks. Students will see the immediate impact of different color choices. The choropleth exercise is particularly important - it combines everything: data binning, color scales, and geographic visualization. Make sure students test their palettes with the colorblind simulator. Common mistakes to watch for: using too many colors, poor contrast, and forgetting to add legends.
:::

## Putting It All Together

### Example: Temperature Visualization

```javascript
// Temperature data with anomalies
const tempScale = d3.scaleDiverging()
  .domain([−10, 0, 10])  // Anomaly in degrees
  .interpolator(d3.interpolateRdBu)
  .clamp(true);  // Prevent extrapolation

// Apply to data
svg.selectAll("rect")
  .data(temperatureData)
  .enter().append("rect")
  .attr("fill", d => tempScale(d.anomaly))
  .attr("opacity", 0.8);  // Slight transparency

// Add legend
const legend = d3.legendColor()
  .scale(tempScale)
  .title("Temperature Anomaly (°C)");
```

## Color Gamut and Display Limitations

### Not All Colors Are Equal

**Display Constraints:**

- **sRGB**: Standard web/monitor gamut (most limited)
- **Adobe RGB**: Wider gamut for professional displays
- **P3**: Modern displays (iPhone, Mac)
- **Print CMYK**: Different gamut than screens

**Practical Implications:**

- Highly saturated colors may not reproduce
- Test on target devices
- Provide fallbacks for older displays
- Consider print requirements early

::: {.notes}
This is often overlooked but critical for professional work. That beautiful saturated blue might look gray on older monitors. Print has completely different limitations - vibrant screen colors often look dull on paper. Always test your visualizations on the actual delivery medium. For web, stick to sRGB color space for maximum compatibility.
:::

## Summary

### Color Theory:
- Human vision: trichromatic with non-uniform perception
- Three main uses: sequential, categorical, diverging
- Accessibility crucial: ~10% have color vision deficiency

### D3 Scales:
- Transform data space to visual space
- Rich variety: linear, log, time, ordinal, sequential
- Color scales with perceptual considerations

### Best Practices:
- Limit categorical colors to 5-8
- Use perceptually uniform scales
- Always consider colorblindness
- Test in context

::: {.notes}
Key takeaways: Color is powerful but complex. The biology of vision constrains our design choices. Always start with the right scale type for your data (sequential/diverging/categorical). Use perceptually uniform color spaces for interpolation. Test with colorblind simulators. Remember that color is just one channel - combine with other encodings for critical information. Most importantly: less is often more with color.
:::

## Next Week: Deceptive Visualizations

### Topics:
- Types of visual deception
- Intentional vs. unintentional misleading
- Cognitive biases in interpretation
- Ethical responsibilities
- Case studies from media

### Pre-reading:
- Tufte Chapter 2: "Graphical Integrity"
- "Truncating the Y-Axis: Threat or Menace?"

## Required Readings

### Core Papers & Resources

:::: {.columns}
::: {.column width="50%"}
**[Which Color Scale to Use](https://blog.datawrapper.de/which-color-scale-to-use-in-data-vis/)**
*Lisa Charlotte Rost, Datawrapper Blog*

- Practical guide to choosing color scales
- Covers sequential, diverging, and categorical palettes
- Real-world examples from data journalism
- Interactive examples you can modify

**[Modeling Color Difference](https://ieeexplore.ieee.org/document/8031043)**
*Szafir, D.A. (2017). IEEE TVCG*

- Empirical study of color perception in visualization
- Shows RGB interpolation problems
- Proposes perceptually-uniform color models
- Critical for understanding why we use LAB/HCL
:::

::: {.column width="50%"}
**[D3 Scale Chromatic](https://observablehq.com/@d3/color-schemes)**
*Observable Interactive Notebook*

- Live code examples of all D3 color schemes
- Interactive comparisons between scales
- Copy-paste ready code snippets
- Includes accessibility information
:::
::::

::: {.notes}
These three readings form the foundation: Rost gives practical advice, Szafir provides the science behind perceptual uniformity, and the Observable notebook gives hands-on practice. Students should spend most time on the Observable notebook - actually trying the code.
:::

## Optional Readings

### Advanced Color Theory

**[Somewhere Over the Rainbow](https://idl.cs.washington.edu/papers/quantitative-color/)**
*Liu, Y. & Heer, J. (2018). CHI 2018*

- Large-scale empirical study (n=9,871 participants)
- Quantifies effectiveness of different color scales
- Proves why rainbow colormaps are problematic
- Recommendations: single-hue and multi-hue scales outperform rainbow

**[Color Use Guidelines for Mapping](https://www.personal.psu.edu/cab38/ColorSch/Schemes.html)**
*Brewer, C.A. (1994). Cartography and GIS*

- Foundation of ColorBrewer tool
- Systematic approach to color selection
- Addresses print, screen, and colorblind considerations
- Still the definitive reference 30 years later

**[The Viridis Color Palettes](https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html)**
*Garnier et al. (2021)*

- Story behind the most popular scientific colormap
- Perceptually uniform, colorblind-safe, print-friendly
- Mathematical derivation and testing methodology